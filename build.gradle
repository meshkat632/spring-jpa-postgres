buildscript {
	ext {
		springBootVersion = '2.0.2.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
	    }	
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
	}
}
/*
buildscript {
	repositories {
	  maven {
		url "https://plugins.gradle.org/m2/"
	  }
	  mavenCentral()
	}
	dependencies {
		classpath('org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE')
// tag::build[]
		classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
// end::build[]
	}
}
*/
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.wagawin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8


repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

apply plugin: 'com.palantir.docker'

docker {
	dependsOn build
	name "${project.group}/${bootJar.baseName}"
	files bootJar.archivePath
	buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

dependencies {
	
	
	compile("io.micrometer:micrometer-registry-prometheus")
	
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')	
	
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('com.h2database:h2')
	//runtime('mysql:mysql-connector-java')
	runtime('org.postgresql:postgresql')
	
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile("junit:junit")	 
	// just for testing purpose 
	compile 'com.github.blocoio:faker:1.2.7'
}